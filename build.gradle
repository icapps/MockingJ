buildscript {
    ext.kotlin_version = '1.2.41'

    repositories {
        mavenCentral()
        jcenter()
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

def artifactVersion = '0.0.2'
def artifactGroup = 'com.icapps.mockingj'
def artifactName = "mockingj"
group "$artifactGroup"
version "$artifactVersion"

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'

sourceCompatibility = 1.7
targetCompatibility = 1.7

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from 'docs/README.txt'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    google()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compile "com.squareup.okhttp3:mockwebserver:3.10.0"
    compile 'com.google.code.gson:gson:2.8.2'
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Maarten Van Giel"
            email "maarten.vangiel@icapps.com"
            organization "iCapps"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "$artifactGroup"
            artifactId "$artifactName"
            version "$artifactVersion"

            from components.java

            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Utility library for easily creating a json-based mocked web api')
                root.appendNode('name', 'mockingj')
                root.appendNode('url', 'https://github.com/icapps/MockingJ')
                root.children().last() + pomConfig
            }
        }
    }
}
